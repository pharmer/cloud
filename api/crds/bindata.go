// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// cloud.pharmer.io_cloudproviders.yaml
// cloud.pharmer.io_credentialformats.yaml
// cloud.pharmer.io_credentials.yaml
// cloud.pharmer.io_kubernetesversions.yaml
// cloud.pharmer.io_machinetypes.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudPharmerIo_cloudprovidersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xc1\x6e\xe3\x38\x0f\xbe\xe7\x29\x88\xf9\x0f\x73\xf9\x93\x60\xb0\x97\x45\x6e\x83\xee\x2e\x50\xcc\x0e\x50\xb4\xc5\xdc\x19\x89\x71\xd4\xd8\x92\x56\x92\x83\xcd\x3c\xfd\x42\xb2\x9d\xc4\x8e\x64\x3b\x71\x3b\xbd\x54\x37\x4b\x24\x45\x91\xd4\xc7\x4f\x09\x6a\xf1\x83\x8c\x15\x4a\xae\x00\xb5\xa0\x7f\x1d\x49\xff\x65\x17\xbb\xdf\xed\x42\xa8\xe5\xfe\xcb\x9a\x1c\x7e\x99\xed\x84\xe4\x2b\xb8\x2b\xad\x53\xc5\x23\x59\x55\x1a\x46\x7f\xd0\x46\x48\xe1\x84\x92\xb3\x82\x1c\x72\x74\xb8\x9a\x01\x30\x43\xe8\x27\x9f\x45\x41\xd6\x61\xa1\x57\x20\xcb\x3c\x9f\x01\xe4\xb8\xa6\xdc\x7a\x19\x00\xd4\x7a\x05\x7a\x8b\xa6\x20\x33\x03\x90\x58\xd0\x0a\x58\xae\x4a\xae\x8d\xda\x0b\x4e\xc6\x2e\xc2\xe7\xa2\x16\x5a\x08\x35\xb3\x9a\x98\x57\xcf\x8c\x2a\x75\x2d\x7e\xbe\x5e\xd9\xa9\x77\xa8\x5d\xf6\x32\x0f\xb5\xc9\x30\x9f\x0b\xeb\xbe\x5d\xae\xfd\x2d\xac\x0b\xeb\x3a\x2f\x0d\xe6\x5d\x67\xc2\x92\x15\x32\x2b\x73\x34\x9d\xc5\x19\x80\x65\x4a\xd3\x0a\x3e\x7d\x9a\x01\xec\x31\x17\x3c\x84\xa0\x72\x44\x69\x92\x5f\x1f\xee\x7f\xfc\xf6\xc4\xb6\x54\x60\x35\x09\xc0\xc9\x32\x23\x74\x90\x6b\xbb\x02\xc2\x82\xdb\x12\x54\xf2\xb0\x51\x26\x7c\xb6\x1d\x82\xaf\x0f\xf7\xb5\x25\x6d\x94\x26\xe3\x44\x73\xf2\x2a\xbe\xc7\xcc\x1e\xe7\x3a\x7b\x7e\xf6\x4e\x55\x32\xc0\x7d\x2e\xa9\xda\x76\x5f\xcd\x11\x07\x5b\x39\xa0\x36\xe0\xb6\xc2\x82\x21\x6d\xc8\x92\x74\xe1\x70\x67\x66\xc1\x8b\xa0\x04\xb5\x7e\x21\xe6\x16\xf0\x44\xc6\x1b\x01\xbb\x55\x65\xce\x81\x29\xb9\x27\xe3\xc0\x10\x53\x99\x14\x3f\x8f\x96\x2d\x38\x15\xb6\xcc\xd1\x51\x1d\xfe\x66\x08\xe9\xc8\x48\xcc\x7d\x38\x4b\xfa\x3f\xa0\xe4\x50\xe0\x01\x0c\xf9\x3d\xa0\x94\x67\xd6\x82\x88\x5d\xc0\x77\x65\x08\x84\xdc\xa8\x15\x6c\x9d\xd3\x76\xb5\x5c\x66\xc2\x35\xb5\xcc\x54\x51\x94\x52\xb8\xc3\x92\x29\xe9\x8c\x58\x97\x4e\x19\xbb\xe4\xb4\xa7\x7c\x69\x45\x36\x47\xc3\xb6\xc2\x11\x73\xa5\xa1\x25\x6a\x31\x0f\x8e\x4b\x17\x2e\x44\xc1\xff\x67\xea\xc2\xb7\x9f\xcf\x3c\x75\x07\x9f\x78\xeb\x8c\x90\xd9\x71\x3a\xd4\x5e\x32\xee\xbe\xfa\x7c\x8e\xb1\x56\xab\xfc\x3f\x85\xd7\x4f\xf9\xa8\x3c\xfe\xf9\xf4\x0c\xcd\xa6\x21\x05\xed\x98\x87\x68\x9f\xd4\xec\x29\xf0\x3e\x50\x42\x6e\xc8\x54\x89\xdb\x18\x55\x04\x8b\x24\xb9\x56\x42\xba\xba\x9e\x04\xc9\x76\xd0\x6d\xb9\x2e\x84\xf3\x99\xfe\xa7\x24\xeb\x7c\x7e\x16\x70\x87\x52\x2a\x07\x6b\x82\x52\x73\x74\xc4\x17\x70\x2f\xe1\x0e\x0b\xca\xef\xd0\xd2\x9b\x87\xdd\x47\xd8\xce\x7d\x48\x87\x03\x7f\x0e\x44\x6d\xc1\x2a\x5a\xc7\xe9\x06\x4a\xa2\x19\x6a\xdd\xc6\x27\x4d\xac\x75\x3f\x38\x59\x61\x7c\x0d\x3b\x74\xe4\x2b\xff\x12\x63\xd2\xf7\xd2\x0f\x66\x88\xfb\xf3\x61\xfe\x97\x32\x05\xba\xf6\x6a\xd7\x97\x8e\x70\x0a\x1c\x8e\x62\x9b\x20\x66\x3b\x36\xe1\x0c\x2f\x86\xfc\x83\x24\x7e\xc4\xeb\xf9\x15\x71\xa4\x19\xd3\xf0\x24\x6a\xb2\xc2\x98\x9b\x71\x25\x6a\xf3\x17\x63\x4d\x33\xa2\xa5\xdf\x8c\x2e\xf6\xc4\x73\x76\x13\x06\x45\x63\x10\x52\x3a\x01\x8b\x12\x46\x1b\x7c\xba\x0d\x93\xa2\x46\xdf\x07\xa7\x46\x25\x2d\x86\x5b\x6d\xc5\x0e\x7e\x35\xa3\x8b\x63\xd1\x6c\x77\x31\x64\x04\xa4\x75\x34\x22\x3b\xf4\xa1\x47\xf0\x40\x58\x9d\xe3\x21\x0e\x71\xa3\x82\xe2\xc7\x46\x50\xce\x13\x3b\x00\x08\x47\x45\x72\x71\xd8\xc5\x6a\x90\xdc\x33\x25\x37\x22\xeb\x13\x1a\xe1\x6a\xed\xb0\x32\xc5\xab\x18\x12\x52\x97\xc9\xb8\x5d\x65\xe9\xc5\xc6\x51\xfc\x6a\x43\x81\xc0\xbf\x82\xa5\xde\x8a\x3e\x17\x41\x63\xf0\x10\x95\x68\x78\xf0\x8d\x85\xe5\xc1\xc4\x57\x7c\x4c\x7d\xde\x2e\xdd\xa8\x44\x55\x96\xd1\x25\x7d\x49\x04\xda\x4e\x45\xcf\x9d\x5c\xda\x95\x6b\x32\x92\x1c\xd9\xba\xc7\x5e\xd4\x72\xe2\x12\xb4\x10\xe0\x5b\xd7\x4a\x82\x46\x9c\x76\xab\xbb\x77\xec\x8c\x97\x4c\x62\xe8\xaa\xf5\xb3\x89\x89\x7c\x22\x51\x01\x6d\x96\x71\x2d\xa3\x48\x18\x8d\xbe\x5b\xae\xe1\x14\x09\xbb\xef\xf9\x82\x39\x8d\x81\x4b\x93\x62\x16\x6f\xc7\x2d\xde\x88\x5d\xbc\x11\xbf\x78\x6f\x86\x31\x98\xc0\x3e\x96\x31\x88\xca\x29\xa6\x31\x84\x34\x83\x64\x23\x11\xcb\x0b\x43\xa9\x3e\x30\xd0\xe2\x49\xee\x7b\xda\x3f\x72\x1e\x7e\xc2\xc2\xfc\x61\x14\x59\xa8\x82\xb4\x56\x2a\x27\x8c\x7b\x04\xe3\x1a\x5c\x26\x5c\x2f\x24\xc2\xb8\x66\x5a\xe0\x8b\x4a\x36\xc1\x71\x16\x84\x9c\x64\xa1\xaf\x95\xfa\x7e\x78\x3a\xe8\xf5\x55\x37\xd8\x30\x2f\x09\x42\x81\x6c\x2b\x24\x3d\xfb\xab\x32\xb2\x53\x7e\xf4\xae\x8f\xde\xf5\xd1\xbb\x3e\x7a\x17\x7c\x3f\x61\xc7\xf0\x13\xf9\x4c\xf8\xc6\xce\xc4\xd0\x51\xa6\xcc\x61\x12\x7c\x33\x5d\x4e\xd2\xe7\xbe\x30\xbd\x27\x89\xeb\x01\x23\x9b\xde\x79\x20\x27\xf9\x23\xec\x6e\x92\x01\x83\x3d\xef\xef\x31\xfa\x94\xc5\x5e\x59\xa7\x31\xf0\xa3\xc3\x55\x6f\xe0\xf4\x03\x17\xc0\xee\xa6\x65\xf6\xa7\x92\x7d\x5c\xe6\xd7\x1c\x63\x88\x1d\x30\x5d\x26\x56\x0c\x16\x89\x15\xbb\x8b\xeb\xbc\x36\x95\x48\x54\xc2\x98\xf7\xf6\x63\x50\xed\x07\x90\x4a\xe6\x4a\x36\x92\x2b\x86\xe9\x3b\x36\xf8\xab\x47\x76\xab\x6a\x4f\x31\xf5\x16\xd2\x60\x11\xf5\x15\x50\xba\x78\xe6\xf5\x59\xa6\xa7\x39\xa2\xd0\x99\xda\x37\xff\x90\xef\xbf\x9c\xbe\xc2\x81\xe7\xf5\xff\xd6\x61\x01\xc0\xfa\xbe\xce\x57\xe0\x4c\x59\xb5\x04\xeb\x94\xc1\x8c\xea\x99\xff\x02\x00\x00\xff\xff\x6b\x23\xf2\x2c\x6d\x1f\x00\x00")

func cloudPharmerIo_cloudprovidersYamlBytes() ([]byte, error) {
	return bindataRead(
		_cloudPharmerIo_cloudprovidersYaml,
		"cloud.pharmer.io_cloudproviders.yaml",
	)
}

func cloudPharmerIo_cloudprovidersYaml() (*asset, error) {
	bytes, err := cloudPharmerIo_cloudprovidersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.pharmer.io_cloudproviders.yaml", size: 8045, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cloudPharmerIo_credentialformatsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x8f\xdb\x36\x10\xbd\xfb\x57\x0c\xd2\x43\x2e\xb5\x8d\x45\x2f\x85\x6e\xc1\xb6\x05\x16\x6d\x81\x20\x1b\xe4\x3e\x16\x47\xf6\x24\x14\xc9\xce\x0c\x85\xba\xbf\xbe\x20\x29\x7b\xad\xb5\x37\x5d\x2c\x50\xdd\xf4\xe6\xeb\xe9\xbd\x21\x6d\x4c\xfc\x85\x44\x39\x86\x0e\x30\x31\xfd\x6d\x14\xca\x9b\x6e\xbe\xfd\xac\x1b\x8e\xdb\xe9\x6e\x47\x86\x77\xab\x6f\x1c\x5c\x07\xf7\x59\x2d\x8e\x9f\x48\x63\x96\x9e\x7e\xa1\x81\x03\x1b\xc7\xb0\x1a\xc9\xd0\xa1\x61\xb7\x02\xe8\x85\xb0\x80\x9f\x79\x24\x35\x1c\x53\x07\x21\x7b\xbf\x02\xf0\xb8\x23\xaf\x25\x07\x00\x53\xea\x20\x1d\x50\x46\x92\x15\x40\xc0\x91\xba\x52\xea\x28\x18\xa3\x1f\xa2\x8c\x68\xba\xe9\x7d\xcc\x6e\x33\xe7\x6d\x38\xae\x34\x51\x5f\x3a\xec\x25\xe6\xd4\xc1\x55\xbc\xb5\x9a\x87\xcc\xac\xcf\x5d\x7f\xab\x5d\x6b\xc8\xb3\xda\xef\x37\xc3\x7f\xb0\xb6\x94\xe4\xb3\xa0\xbf\xc1\xaa\x46\x95\xc3\x3e\x7b\x94\xeb\xf8\x0a\x40\xfb\x98\xa8\x83\x77\xef\x56\x00\x13\x7a\x76\x55\x91\x46\x2a\x26\x0a\x1f\x3e\x3e\x7c\xf9\xe9\xb1\x3f\xd0\x88\x0d\x04\x70\xa4\xbd\x70\xaa\x79\x57\x9c\x80\x15\xec\x40\xd0\x4a\x60\x88\x52\x5f\xaf\x98\xc1\x87\x8f\x0f\x73\xbf\x24\x31\x91\x18\x9f\xb4\x68\xa2\x9f\xed\x3e\x63\xcf\x26\xbf\x2f\xd4\x5a\x0e\xb8\x62\x30\xb5\xc9\x53\xc3\xc8\x81\x36\x0e\x71\x00\x3b\xb0\x82\x50\x12\x52\x0a\x56\x3f\xf1\xa2\x2d\x94\x14\x0c\x10\x77\x5f\xa9\xb7\x0d\x3c\x92\x94\x26\xa0\x87\x98\xbd\x83\x3e\x86\x89\xc4\x40\xa8\x8f\xfb\xc0\xff\x9c\x3b\x2b\x58\xac\x23\x3d\x1a\xcd\x56\x9c\x1e\x0e\x46\x12\xd0\x17\x51\x33\xfd\x08\x18\x1c\x8c\x78\x04\xa1\x32\x03\x72\xb8\xe8\x56\x53\x74\x03\x7f\x46\x21\xe0\x30\xc4\x0e\x0e\x66\x49\xbb\xed\x76\xcf\x76\x5a\xf0\x3e\x8e\x63\x0e\x6c\xc7\x6d\x1f\x83\x09\xef\xb2\x45\xd1\xad\xa3\x89\xfc\x56\x79\xbf\x46\xe9\x0f\x6c\xd4\x5b\x16\xda\x62\xe2\x75\x25\x1e\xac\x9e\x92\xd1\xfd\x20\xf3\x69\xd0\xf7\x17\x4c\xed\x58\xec\x57\x13\x0e\xfb\x33\x5c\xb7\xf1\x45\xdd\xcb\x32\x16\x9b\x71\x2e\x6b\xfc\x9f\xe4\x2d\x50\x51\xe5\xd3\xaf\x8f\x9f\xe1\x34\xb4\x5a\xb0\xd4\xbc\xaa\xfd\x54\xa6\x4f\xc2\x17\xa1\x38\x0c\x24\xcd\xb8\x41\xe2\x58\x3b\x52\x70\x29\x72\xb0\xb6\x52\x9e\x29\x2c\x45\xd7\xbc\x1b\xd9\x8a\xd3\x7f\x65\x52\x2b\xfe\x6c\xe0\x1e\x43\x88\x06\x3b\x82\x9c\x1c\x1a\xb9\x0d\x3c\x04\xb8\xc7\x91\xfc\x3d\x2a\xfd\xef\xb2\x17\x85\x75\x5d\x24\xfd\x6f\xe1\x2f\x6f\xa7\x65\x62\x53\xeb\x0c\x9f\x2e\x97\x9b\x0e\x3d\x3f\x93\x8f\x89\xfa\xc5\x11\x71\xa4\x2c\x65\x8d\x0d\x8d\xca\xf2\xdf\xbc\x78\x5e\x3e\x9d\x75\x22\x6b\xf2\x78\x6c\xf9\xcb\xd0\x0b\x1f\x57\x9e\x81\xc9\x3b\x7d\x9e\xce\x46\xe3\x15\xf8\xf2\xe8\xf6\x50\x98\xfa\x18\x06\xde\xdf\x0a\x7e\x87\xc2\x4c\x24\xca\xf8\xa6\x42\x0e\x29\x5f\x7d\xef\xab\x2a\xbf\xea\xf2\x36\x7b\x75\x61\xfd\x35\x7a\x43\xe5\xcd\xcd\xb9\x0c\xa1\x08\x1e\x17\x91\x24\x71\x62\x47\xf2\x4a\x43\xcb\x41\x2b\x9b\x74\x99\xbe\x5e\xae\xc6\x22\xd2\xec\x5f\x40\xa7\x89\xdf\xdf\xf8\x67\xd0\x74\xfa\x2b\x30\xdd\x3d\xbd\xd5\x2d\x59\xcf\x3f\xd0\x35\x00\xa0\xe5\x46\x71\x1d\x98\x64\x6a\x80\x45\xc1\x3d\xcd\xc8\xbf\x01\x00\x00\xff\xff\x83\x5c\x00\x81\x56\x08\x00\x00")

func cloudPharmerIo_credentialformatsYamlBytes() ([]byte, error) {
	return bindataRead(
		_cloudPharmerIo_credentialformatsYaml,
		"cloud.pharmer.io_credentialformats.yaml",
	)
}

func cloudPharmerIo_credentialformatsYaml() (*asset, error) {
	bytes, err := cloudPharmerIo_credentialformatsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.pharmer.io_credentialformats.yaml", size: 2134, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cloudPharmerIo_credentialsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x41\x6f\xf3\x36\x0c\xbd\xfb\x57\x10\xdf\x0e\xbd\x2c\x0e\x8a\x5d\x06\xdf\x8a\x6c\x87\x62\x1b\x50\x34\x45\xef\x8c\xc5\x24\x5c\x65\x49\x23\x29\x63\xdd\xaf\x1f\x24\x3b\x89\x93\x2d\xdd\x69\xb9\xf9\x89\x7a\x7c\x7c\xa4\x18\x4c\xfc\x4e\xa2\x1c\x43\x07\x98\x98\xfe\x34\x0a\xe5\x4b\xdb\x8f\x1f\xb5\xe5\xb8\x1e\x1f\x77\x64\xf8\xd8\x7c\x70\x70\x1d\x6c\xb2\x5a\x1c\x5e\x49\x63\x96\x9e\x7e\xa2\x3d\x07\x36\x8e\xa1\x19\xc8\xd0\xa1\x61\xd7\x00\xf4\x42\x58\xc0\x37\x1e\x48\x0d\x87\xd4\x41\xc8\xde\x37\x00\x1e\x77\xe4\xb5\xc4\x00\x60\x4a\x1d\xa4\x23\xca\x40\xd2\x00\x04\x1c\xa8\x2b\x57\x1d\x05\x63\xf4\xda\xf6\x3e\x66\xd7\xce\x11\x2d\xc7\x46\x13\xf5\xe5\xee\x41\x62\x4e\x1d\xfc\xe3\x7c\x22\x99\xe9\x67\xbd\x67\xbe\x0a\x7a\x56\xfb\xe5\xe6\xe0\x57\x56\xab\x87\xc9\x67\x41\x7f\xa5\xa1\xe2\xca\xe1\x90\x3d\xca\xf2\xa4\x01\xd0\x3e\x26\xea\xe0\xdb\xb7\x06\x60\x44\xcf\xae\xd6\x3c\x25\x8f\x89\xc2\xd3\xcb\xf3\xfb\x0f\xdb\xfe\x48\x03\x4e\x20\x80\x23\xed\x85\x53\x8d\x5b\x28\x00\x56\xb0\x23\xc1\x14\x0c\xfb\x28\xf5\x73\xa1\x03\x9e\x5e\x9e\x67\x8e\x24\x31\x91\x18\x9f\xea\x9c\xac\x3c\x37\xf1\x8c\xdd\x64\x7b\x28\x72\xa6\x18\x70\xa5\x6d\x34\xe5\x1c\x27\x8c\x1c\xe8\x94\x3d\xee\xc1\x8e\xac\x20\x94\x84\x94\x82\xd5\xb2\x16\xb4\x50\x42\x30\x40\xdc\xfd\x4e\xbd\xb5\xb0\x25\x29\x24\xa0\xc7\x98\xbd\x83\x3e\x86\x91\xc4\x40\xa8\x8f\x87\xc0\x7f\x9d\x99\x15\x2c\xd6\x94\x1e\x8d\x66\xcb\x4f\x3f\x0e\x46\x12\xd0\x17\x23\x33\x7d\x0f\x18\x1c\x0c\xf8\x09\x42\x25\x07\xe4\xb0\x60\xab\x21\xda\xc2\x6f\x51\x08\x38\xec\x63\x07\x47\xb3\xa4\xdd\x7a\x7d\x60\x3b\x8d\x6d\x1f\x87\x21\x07\xb6\xcf\x75\x1f\x83\x09\xef\xb2\x45\xd1\xb5\xa3\x91\xfc\x5a\xf9\xb0\x42\xe9\x8f\x6c\xd4\x5b\x16\x5a\x63\xe2\x55\x15\x1e\xac\xce\xfe\xe0\xbe\x93\x79\xc6\xf5\x61\xa1\xd4\x3e\x4b\xcb\xd5\x84\xc3\xe1\x0c\xd7\x49\xbb\xeb\x7b\x19\xb7\xd2\x60\x9c\xaf\x4d\xfa\x2f\xf6\x16\xa8\xb8\xf2\xfa\xf3\xf6\x0d\x4e\x49\x6b\x0b\xae\x3d\xaf\x6e\x5f\xae\xe9\xc5\xf8\x62\x14\x87\x3d\xc9\xd4\xb8\xbd\xc4\xa1\x32\x52\x70\x29\x72\xb0\x69\x98\x3c\x53\xb8\x36\x5d\xf3\x6e\x60\x2b\x9d\xfe\x23\x93\x5a\xe9\x4f\x0b\x1b\x0c\x21\x1a\xec\x08\x72\x72\x68\xe4\x5a\x78\x0e\xb0\xc1\x81\xfc\x06\x95\xfe\x77\xdb\x8b\xc3\xba\x2a\x96\xfe\xb7\xf1\xcb\x9d\x73\x1d\x38\xb9\x75\x86\x4f\x8b\xe3\x5f\x3b\x74\x79\x87\xdb\x44\xfd\xd5\xe3\x70\xa4\x2c\x65\x80\x0d\x8d\xca\xd8\xdf\xac\x93\xfb\x2f\xb2\x66\xb9\x91\x56\x5f\xaa\x73\x75\x5f\xa2\x7f\xb9\x73\xeb\x6e\xb5\x5f\xd4\x37\xab\x18\xd9\x91\xdc\xb2\xdd\xe1\x2a\x4d\x2f\xb5\x2d\xc3\x57\x55\xf2\x15\x70\x62\xfd\xda\xe1\x1b\x68\x3c\xfd\xa1\x8c\x8f\x97\xaf\x5a\xe6\x6a\x5e\xf3\xf5\x00\x40\xcb\x04\xbb\x0e\x4c\x32\x4d\x80\x45\xc1\x03\xcd\xc8\xdf\x01\x00\x00\xff\xff\x5d\x00\xc6\x83\x9c\x06\x00\x00")

func cloudPharmerIo_credentialsYamlBytes() ([]byte, error) {
	return bindataRead(
		_cloudPharmerIo_credentialsYaml,
		"cloud.pharmer.io_credentials.yaml",
	)
}

func cloudPharmerIo_credentialsYaml() (*asset, error) {
	bytes, err := cloudPharmerIo_credentialsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.pharmer.io_credentials.yaml", size: 1692, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cloudPharmerIo_kubernetesversionsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\xbd\x6e\x24\x37\x0c\xc7\xfb\x79\x0a\xe2\x52\x5c\x93\x9d\x85\x91\x26\x98\xee\xe0\xa4\x30\x2e\x01\x8c\xf3\xe1\x7a\xee\x88\xbb\xcb\xb3\x86\x52\x48\x6a\x11\xe7\xe9\x03\x69\x66\x3f\x6c\xaf\x13\x37\x37\x9d\x48\x8a\xfc\xeb\x47\x4a\x83\x99\xbf\x91\x1a\x27\x19\x00\x33\xd3\xdf\x4e\x52\x57\xd6\x3f\xfe\x6a\x3d\xa7\xf5\xe1\x66\x43\x8e\x37\xdd\x23\x4b\x18\xe0\xb6\x98\xa7\xe9\x0b\x59\x2a\x3a\xd2\x6f\xb4\x65\x61\xe7\x24\xdd\x44\x8e\x01\x1d\x87\x0e\x60\x54\xc2\x6a\xfc\xca\x13\x99\xe3\x94\x07\x90\x12\x63\x07\x10\x71\x43\xd1\x6a\x0c\x00\xe6\x3c\x40\xde\xa3\x4e\xa4\x1d\x80\xe0\x44\x03\x3c\x96\x0d\xa9\x90\x93\x1d\x66\x55\xd6\x8f\x31\x95\xd0\x2f\x81\x3d\xa7\xce\x32\x8d\x35\xc5\x4e\x53\xc9\x03\xbc\xf2\xcf\xb9\x96\x2a\xb3\xec\xcf\xa7\xb4\xcb\x61\x9b\x2f\xb2\xf9\xe7\xeb\xfe\x3f\xd8\xbc\xc5\xe4\x58\x14\xe3\x35\x61\xcd\x6d\x2c\xbb\x12\x51\xaf\x04\x74\x00\x36\xa6\x4c\x03\x7c\xf8\xd0\x01\x1c\x30\x72\x68\x58\x66\x61\x29\x93\x7c\xba\xbf\xfb\xf6\xcb\xc3\xb8\xa7\x09\x67\x23\x40\x20\x1b\x95\x73\x8b\x7b\x2d\x0b\xd8\xc0\xf7\x04\xf3\x1e\xd8\x26\x6d\xcb\xd7\xe2\xe0\xd3\xfd\xdd\x92\x31\x6b\xca\xa4\xce\x47\x22\x33\xfb\x53\xd7\x4f\xb6\x17\xb5\x3f\x56\x71\x4b\xd5\x50\xfb\x4c\x73\xe9\xa5\x02\x05\xb0\x59\x44\xda\x82\xef\xd9\x40\x29\x2b\x19\x89\xb7\x43\x5e\xa4\x85\x1a\x82\x02\x69\xf3\x9d\x46\xef\xe1\x81\xb4\x26\x01\xdb\xa7\x12\x03\x8c\x49\x0e\xa4\x0e\x4a\x63\xda\x09\xff\x73\xca\x6c\xe0\xa9\x95\x8c\xe8\xb4\xb4\xe3\xf8\xb1\x38\xa9\x60\xac\x58\x0b\xfd\x0c\x28\x01\x26\x7c\x02\xa5\x5a\x03\x8a\x5c\x64\x6b\x21\xd6\xc3\x9f\x49\x09\x58\xb6\x69\x80\xbd\x7b\xb6\x61\xbd\xde\xb1\x1f\xe7\x7c\x4c\xd3\x54\x84\xfd\x69\x3d\x26\x71\xe5\x4d\xf1\xa4\xb6\x0e\x74\xa0\xb8\x36\xde\xad\x50\xc7\x3d\x3b\x8d\x5e\x94\xd6\x98\x79\xd5\x84\x8b\xb7\x21\x9d\xc2\x4f\xba\x5c\x0a\xfb\x78\xa1\xd4\x9f\xea\x00\x98\x2b\xcb\xee\x64\x6e\x33\xf9\x26\xf7\x3a\x91\xb5\xcf\xb8\x6c\x9b\xf5\x9f\xf1\x56\x53\xa5\xf2\xe5\xf7\x87\xaf\x70\x2c\xda\x5a\xf0\x9c\x79\xa3\x7d\xde\x66\x67\xf0\x15\x14\xcb\x96\x74\x6e\xdc\x56\xd3\xd4\x32\x92\x84\x9c\x58\xbc\x2d\xc6\xc8\x24\xcf\xa1\x5b\xd9\x4c\xec\xb5\xd3\x7f\x15\x32\xaf\xfd\xe9\xe1\x16\x45\x92\xc3\x86\xa0\xe4\x80\x4e\xa1\x87\x3b\x81\x5b\x9c\x28\xde\xa2\xd1\x0f\xc7\x5e\x09\xdb\xaa\x22\xfd\x7f\xf0\x97\x8f\xd4\xf3\xc0\x99\xd6\xc9\x7c\x7c\x62\xae\x76\xe8\xd5\xad\x7c\xc8\x34\x3e\xbb\x23\x81\x8c\xb5\xce\xb1\xa3\x53\x9d\xfe\xeb\xef\xcf\xdb\xf7\xb3\x7e\x24\x87\x17\x16\x00\x0c\xa1\x3d\xb7\x18\xef\xdf\xd8\x75\x3e\xd2\x26\xa5\x48\x28\xdd\x35\xdf\x8b\xe3\xd6\x6f\xc7\x7e\xe5\x49\x78\x13\x65\xc3\x89\xdf\x93\xbe\x3f\x9a\xe5\xdd\xd1\x75\xc2\x2a\xc1\xcb\xf0\xd5\x85\xc4\xff\xee\xdf\x0b\xd3\xe1\xf8\x7f\x3b\xdc\x9c\x57\x0d\xdb\x6a\xf9\xeb\x34\x07\x80\xd5\xfb\x11\x06\x70\x2d\x34\x1b\x3c\x29\xee\x68\xb1\xfc\x1b\x00\x00\xff\xff\x2f\x0f\x76\x7f\x2b\x07\x00\x00")

func cloudPharmerIo_kubernetesversionsYamlBytes() ([]byte, error) {
	return bindataRead(
		_cloudPharmerIo_kubernetesversionsYaml,
		"cloud.pharmer.io_kubernetesversions.yaml",
	)
}

func cloudPharmerIo_kubernetesversionsYaml() (*asset, error) {
	bytes, err := cloudPharmerIo_kubernetesversionsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.pharmer.io_kubernetesversions.yaml", size: 1835, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cloudPharmerIo_machinetypesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4f\x93\x22\xb7\x0f\xbd\xf3\x29\x54\xfb\x3b\xec\xe5\x47\x53\x53\xb9\xa4\xfa\xb6\x45\x72\xd8\x6c\x26\x99\x1a\x26\x7b\x17\xb6\x00\x07\xff\x8b\x24\x53\x61\x53\xf9\xee\x29\xbb\x69\xa0\xd9\x99\x84\x43\xd2\x27\x2c\xeb\x49\xf2\xd3\x93\x0d\x66\xf7\x99\x58\x5c\x8a\x3d\x60\x76\xf4\xbb\x52\xac\x2b\xe9\xf6\xdf\x4a\xe7\xd2\xe2\xf0\xb0\x26\xc5\x87\xd9\xde\x45\xdb\xc3\xb2\x88\xa6\xf0\x4c\x92\x0a\x1b\xfa\x8e\x36\x2e\x3a\x75\x29\xce\x02\x29\x5a\x54\xec\x67\x00\x86\x09\xab\xf1\xc5\x05\x12\xc5\x90\x7b\x88\xc5\xfb\x19\x80\xc7\x35\x79\xa9\x3e\x00\x98\x73\x0f\x79\x87\x1c\x88\x67\x00\x11\x03\xf5\x10\xd0\xec\x5c\x24\x3d\x66\x92\xce\xf8\x54\x6c\x77\x72\xe9\x5c\x9a\x49\x26\x53\xc1\x68\x6d\xcb\x8a\xfe\x89\x5d\x54\xe2\x65\xf2\x25\xc4\x16\x78\x0e\x3f\xac\x7e\xfe\xe9\x09\x75\xd7\x43\x57\x01\x9d\xec\x4b\x4b\x38\x64\x58\x7d\xfa\xa5\xad\x6a\x8a\x1e\x44\xd9\xc5\xed\xab\x30\x93\xaf\x61\xcb\xa7\x3b\x61\x8c\xe1\x0a\xf6\xfc\xe1\xf1\x35\xd8\x96\x53\xc9\x3d\x7c\x75\xc0\x01\x76\x22\x68\x60\xfc\x71\x60\xe4\xe5\x98\xa9\x59\xbd\x13\xfd\x74\xbb\xf3\xa3\x13\x6d\xbb\xd9\x17\x46\x3f\xe5\xb1\x6d\x88\x8b\xdb\xe2\x91\x27\x5b\x33\x00\x31\xa9\x56\xf6\xee\x5d\xfd\x5d\xd6\x7c\xea\xac\xf4\xf0\xc7\x9f\x33\x80\x03\x7a\x67\x5b\x33\x87\x9a\x52\xa6\xf8\xe1\xe9\xe3\xe7\x6f\x56\x66\x47\x01\x07\x23\x40\xe6\x94\x89\xd5\x8d\xa5\x0f\xfd\x3d\x2b\xeb\x6c\x03\xb0\x24\x86\x5d\x6e\x11\xe1\x7d\x0d\x35\xf8\x80\xad\x5a\x22\x01\xdd\x11\x1c\x06\x1b\x59\x90\x96\x06\xd2\x06\x74\xe7\x04\x98\x32\x93\x50\xd4\x56\xd2\x55\x58\xa8\x2e\x18\x21\xad\x7f\x25\xa3\x1d\xac\x88\x6b\x10\x90\x5d\x2a\xde\x82\x49\xf1\x40\xac\xc0\x64\xd2\x36\xba\x2f\xe7\xc8\x02\x9a\x5a\x4a\x8f\x4a\x27\x0e\xc7\xaf\x29\x2b\xa2\xaf\x24\x14\xfa\x3f\x60\xb4\x10\xf0\x08\x4c\x35\x07\x94\x78\x15\xad\xb9\x48\x07\x8f\x89\x09\x5c\xdc\xa4\x1e\x76\xaa\x59\xfa\xc5\x62\xeb\x74\x9c\x25\x93\x42\x28\xd1\xe9\x71\x61\x52\x54\x76\xeb\xa2\x89\x65\x61\xe9\x40\x7e\x21\x6e\x3b\x47\x36\x3b\xa7\x64\xb4\x30\x2d\x30\xbb\x79\x2b\x3c\x6a\x1b\xc8\x60\xff\x77\x6e\xcf\xfb\xab\x4a\x6f\xb4\x35\x7c\x4d\x3c\x6f\xf2\x5e\x05\x04\x4e\x00\x4f\xb0\xa1\xfe\x0b\xbd\xd5\x54\x59\x79\xfe\x7e\xf5\x02\x63\xd2\xd6\x82\x29\xe7\x8d\xed\x0b\x4c\x2e\xc4\x57\xa2\x5c\xdc\x10\x0f\x8d\xdb\x70\x0a\x2d\x22\x45\x9b\x93\x8b\xda\x16\xc6\x3b\x8a\x53\xd2\xa5\xac\x83\xd3\xda\xe9\xdf\x0a\x89\xd6\xfe\x74\xb0\xc4\x18\x93\xc2\x9a\xa0\x64\x8b\x4a\xb6\x83\x8f\x11\x96\x18\xc8\x2f\x51\xe8\x3f\xa7\xbd\x8d\xd1\xbc\x52\xfa\xcf\xc4\x5f\x5f\x84\x53\xc7\x81\xad\xb3\x79\xbc\xcc\x5e\xed\xd0\xd5\x6c\xaf\x32\x99\xc9\x74\x58\x12\xc7\x55\xc1\x8a\x4a\x55\xf7\xb7\x57\xc4\xdb\x33\x59\x3f\x83\x4a\xdb\xc4\xc7\xa9\xf5\x8d\xd3\x34\x40\x2e\x77\xfb\xda\x2a\x85\x9a\xc1\xbe\x0e\x59\xa7\xe4\x09\xe3\x0d\xe6\x72\xf0\xbb\xf3\x38\xd9\xdf\xed\xcc\x18\xee\xf7\xa5\x6d\xed\xfa\xad\xbf\x53\x0a\x5f\x19\xff\x26\xcc\xb8\x85\xcc\x78\x9c\x0a\x7c\x7f\x3f\x9b\x5f\x52\xbc\xed\xde\xbf\x57\x4a\x9d\xb0\xaa\xa3\xeb\x50\x73\x18\x5f\xbd\x71\x3d\x3e\x67\xe3\x7a\x7c\x4c\xaf\x23\x4f\x84\x7d\x63\x3a\x8c\x7f\x2e\x0e\x0f\x97\xd5\xe9\xa1\x1e\x9e\xc8\xb6\x01\x20\xf5\xe2\xb0\x3d\x28\x97\x41\xc5\xa2\x89\x71\x4b\x27\xcb\x5f\x01\x00\x00\xff\xff\xaf\x7f\x42\xf6\xa8\x08\x00\x00")

func cloudPharmerIo_machinetypesYamlBytes() ([]byte, error) {
	return bindataRead(
		_cloudPharmerIo_machinetypesYaml,
		"cloud.pharmer.io_machinetypes.yaml",
	)
}

func cloudPharmerIo_machinetypesYaml() (*asset, error) {
	bytes, err := cloudPharmerIo_machinetypesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.pharmer.io_machinetypes.yaml", size: 2216, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.pharmer.io_cloudproviders.yaml":     cloudPharmerIo_cloudprovidersYaml,
	"cloud.pharmer.io_credentialformats.yaml":  cloudPharmerIo_credentialformatsYaml,
	"cloud.pharmer.io_credentials.yaml":        cloudPharmerIo_credentialsYaml,
	"cloud.pharmer.io_kubernetesversions.yaml": cloudPharmerIo_kubernetesversionsYaml,
	"cloud.pharmer.io_machinetypes.yaml":       cloudPharmerIo_machinetypesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.pharmer.io_cloudproviders.yaml":     {cloudPharmerIo_cloudprovidersYaml, map[string]*bintree{}},
	"cloud.pharmer.io_credentialformats.yaml":  {cloudPharmerIo_credentialformatsYaml, map[string]*bintree{}},
	"cloud.pharmer.io_credentials.yaml":        {cloudPharmerIo_credentialsYaml, map[string]*bintree{}},
	"cloud.pharmer.io_kubernetesversions.yaml": {cloudPharmerIo_kubernetesversionsYaml, map[string]*bintree{}},
	"cloud.pharmer.io_machinetypes.yaml":       {cloudPharmerIo_machinetypesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
