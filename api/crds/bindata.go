// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// cloud.pharmer.io_cloudproviders.yaml
// cloud.pharmer.io_credentialformats.yaml
// cloud.pharmer.io_credentials.yaml
// cloud.pharmer.io_kubernetesversions.yaml
// cloud.pharmer.io_machinetypes.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudPharmerIo_cloudprovidersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x4d\x6f\xe3\x36\x13\xbe\xfb\x57\x0c\xf0\x1e\xf6\xf2\xda\x46\xd0\x4b\xe1\x5b\x91\x76\x81\xc5\x76\x81\x20\x49\xf7\x3e\x16\xc7\x32\x63\x8a\x64\x39\x94\x5b\xef\xaf\x2f\x48\xc9\x1f\xb2\x49\xc9\x1f\xc9\xe6\x12\xde\x48\xce\x0c\x87\xf3\xf1\x3c\x94\x8d\x56\x7e\x27\xc7\xd2\xe8\x19\xa0\x95\xf4\xaf\x27\x1d\x66\x3c\x59\xfd\xca\x13\x69\xa6\xeb\xbb\x39\x79\xbc\x1b\xad\xa4\x16\x33\xb8\xaf\xd9\x9b\xea\x91\xd8\xd4\xae\xa0\xdf\x69\x21\xb5\xf4\xd2\xe8\x51\x45\x1e\x05\x7a\x9c\x8d\x00\x0a\x47\x18\x16\x9f\x65\x45\xec\xb1\xb2\x33\xd0\xb5\x52\x23\x00\x85\x73\x52\x1c\x64\x00\xd0\xda\x19\xd8\x25\xba\x8a\xdc\x08\x40\x63\x45\x33\x28\x94\xa9\x85\x75\x66\x2d\x05\x39\x9e\xc4\xe9\xa4\x15\x9a\x48\x33\x62\x4b\x45\x50\x2f\x9d\xa9\x6d\x2b\x7e\xb8\xdf\xd8\x69\x4f\x28\xd0\x53\x69\x9c\xdc\xce\xc7\x07\xc7\x85\x19\x5a\xcb\x85\x11\x14\xa7\xed\xfd\x82\xc1\x87\xf6\xfc\xb8\xae\x24\xfb\xaf\xa7\x7b\x7f\x4a\xf6\x71\xdf\xaa\xda\xa1\x3a\xf6\x3c\x6e\xb1\xd4\x65\xad\xd0\x1d\x6d\x8e\x00\xac\x23\x26\xb7\xa6\xbf\xf4\x4a\x9b\x7f\xf4\x67\x49\x4a\xf0\x0c\x16\xa8\x38\x78\xc3\x85\xb1\x14\x0e\xac\xd9\x47\xf9\x35\x2a\x29\x62\x4c\x9b\x9b\x18\x4b\xfa\xb7\x87\x2f\xdf\x7f\x79\x2a\x96\x54\x61\xb3\x18\xcc\x1a\x4b\xce\xef\x2e\xdc\x84\x79\x97\xe0\xdd\x1a\x80\x20\x2e\x9c\xb4\xd1\x22\x7c\x0a\xa6\x1a\x19\x10\x21\xa5\xc4\xe0\x97\x04\xeb\x66\x8d\x04\x70\x3c\x06\xcc\x02\xfc\x52\x32\x38\x8a\x17\xd0\x3e\xba\x74\x60\x16\x82\x08\x6a\x30\xf3\x17\x2a\xfc\x04\x9e\xc2\x25\x1d\x03\x2f\x4d\xad\x04\x14\x46\xaf\xc9\x79\x70\x54\x98\x52\xcb\x1f\x3b\xcb\x0c\xde\xc4\x23\x15\x7a\x6a\x03\xbb\x1d\x52\x7b\x72\x1a\x55\x08\x42\x4d\xff\x07\xd4\x02\x2a\xdc\x80\xa3\x70\x06\xd4\xfa\xc0\x5a\x14\xe1\x09\x7c\x33\x8e\x40\xea\x85\x99\xc1\xd2\x7b\xcb\xb3\xe9\xb4\x94\x7e\x5b\xd2\x85\xa9\xaa\x5a\x4b\xbf\x99\x16\x46\x7b\x27\xe7\xb5\x37\x8e\xa7\x82\xd6\xa4\xa6\x2c\xcb\x31\xba\x62\x29\x3d\x15\xbe\x76\x34\x45\x2b\xc7\xd1\x71\xed\x63\x5f\x54\xe2\x7f\xae\xad\x7f\xfe\x74\xe0\xa9\xdf\x84\x9c\xb1\x77\x52\x97\xbb\xe5\x58\x55\xd9\xb8\x87\xba\x02\xc9\x80\xad\x5a\xe3\xff\x3e\xbc\x61\x29\x44\xe5\xf1\x8f\xa7\x67\xd8\x1e\x1a\x53\xd0\x8d\x79\x8c\xf6\x5e\x8d\xf7\x81\x0f\x81\x92\x7a\x41\xae\x49\xdc\xc2\x99\x2a\x5a\x24\x2d\xac\x91\xda\xc7\x49\xa1\x24\xe9\x6e\xd0\xb9\x9e\x57\xd2\x87\x4c\xff\x5d\x13\xfb\x90\x9f\x09\xdc\xa3\xd6\xc6\xc3\x9c\xa0\xb6\x02\x3d\x89\x09\x7c\xd1\x70\x8f\x15\xa9\x7b\x64\x7a\xf3\xb0\x87\x08\xf3\x38\x84\x74\x38\xf0\x87\x78\xd4\x15\x6c\xa2\xb5\x5b\xde\x22\x4a\x32\x43\x9d\x96\x7f\xb2\x54\x74\xfa\x43\x10\x4b\x17\x6a\xd8\xa3\xa7\x50\xf9\xa7\xe8\x91\xef\xcb\x08\x50\x8e\x44\xb8\x1f\xaa\xcf\xc6\x55\xe8\xbb\xbb\x79\x3d\xc8\xf6\x75\xba\xce\x5e\xb1\xbf\x77\x35\x77\x53\x9f\x27\x4d\x36\xbd\x7f\x75\xbf\x27\x6d\xfe\x64\x0c\xd8\x8e\x64\x49\x6e\xc7\x31\x26\xa4\x73\x76\x15\x36\x24\x63\x10\x53\x7a\x03\x46\x64\x8c\x6e\x71\xe3\x3a\xac\x48\x1a\x7d\x1f\xfc\x38\x2b\x69\x29\x3c\xe9\x2a\x1e\xe1\xca\x76\x1c\xe3\x4b\x32\xdb\xf7\x47\x40\x70\x06\xd4\x1c\x69\x24\x4e\xe8\x43\x8f\xe8\x81\x64\xab\x70\x93\x86\x9e\xb3\x82\x12\xc6\xa2\x79\xbb\x64\xd4\xa5\xa7\x2a\xbb\x39\xec\x62\x33\x48\xaf\x0b\xa3\x17\xb2\xec\x13\x3a\xc3\xd5\xd6\x61\xe3\xaa\x57\x31\x24\xb5\xad\xb3\x71\xbb\xc8\xd2\x0b\xa7\x51\xfc\x62\x43\xf1\x7d\xfd\x0a\x96\x7a\x2b\xfa\x50\x04\x9d\xc3\x4d\x52\x62\xfb\xda\xbd\xb2\xb0\x02\x98\x84\x8a\x4f\xa9\x8f\xbb\xa5\x9b\x94\x68\xca\x32\xb9\x65\x4f\x09\xba\xeb\x54\xf2\xde\xd9\xad\x55\x3d\x27\xa7\xc9\x13\xb7\x1c\x7b\x52\xcb\x99\x26\xe8\x2f\xfe\x7e\x7e\xbf\x91\xe1\x33\x39\xe9\xf2\xfe\xa5\x1c\x9f\x31\x9a\x7c\xe1\x5f\xc2\xf2\x19\xbb\xef\xf9\xd6\xdf\x8f\x81\x32\xce\x71\xfd\xdb\xb1\xfd\x1b\xf1\xfd\x1b\x31\xfe\x7b\x73\xfe\x60\x02\xfb\x78\x7f\x10\x27\x73\xdc\x7f\x94\xfd\xaf\xc7\x08\x32\x48\xff\x99\x58\x9e\x18\xca\x21\xf3\x00\xe9\x92\x5e\xf7\x10\x32\x0a\x11\x7f\xf3\x41\xf5\x70\x16\x7d\x37\x41\x9a\x1b\xa3\x08\xd3\x1e\xc1\x79\x94\x53\x4a\xdf\x0b\x89\x70\x1e\xbd\x55\xf8\x62\xb2\xb4\x74\x9e\x05\xa9\x6f\xb2\xd0\x47\x6e\x81\xa1\xf6\x17\xbd\xbc\xea\x06\x29\xec\x94\xb2\x2b\x2c\x96\x52\xd3\x73\x68\x95\x0f\xee\x3a\x1c\x1f\xdc\xf5\xc1\x5d\x1f\xdc\x75\x34\x3a\xd9\xff\xb6\xc7\x8e\xe1\x8f\xd6\x03\xe1\x2b\x99\xa9\xfd\x49\x7f\x73\x13\x7c\x17\xb6\xbe\x49\x5f\x84\xc2\x0c\x9e\x64\xda\x03\xce\x24\xbd\xc3\x40\xde\xe4\x8f\xe4\xd5\x4d\x06\x1c\xf6\x7c\x11\x9f\xa3\x4f\x65\xea\xbb\x67\x3f\x06\x7e\x06\xb8\xe8\xab\x34\xff\xc9\x09\xc0\xab\xdb\x32\xfb\xc3\xe8\xbe\xb7\xcc\xcf\xb9\xc6\xd0\xeb\xa0\xb0\x75\x66\xc7\x61\x95\xd9\xe1\x55\x5a\xe7\xb5\x9f\x12\x99\x4a\xc8\x04\xae\x83\x24\x8f\x51\xb5\x1f\x40\x1a\x99\x0b\x5f\x23\xca\x14\x98\xef\xb1\xc1\xdf\x21\xca\x6b\x55\x7b\x8a\xa9\xb7\x90\x06\x8b\xa8\xaf\x80\xf2\xc5\x33\x6e\xef\x72\x7b\x9a\x13\x0a\x47\x4b\xeb\xed\x5f\xca\xeb\xbb\xfd\x2c\x5e\x78\xdc\xfe\xd1\x1b\x37\x00\xe2\xbf\xa0\x62\x06\xde\xd5\x0d\x25\xb0\x37\x0e\x4b\x6a\x57\xfe\x0b\x00\x00\xff\xff\x88\x54\x1b\x11\x9e\x1e\x00\x00")

func cloudPharmerIo_cloudprovidersYamlBytes() ([]byte, error) {
	return bindataRead(
		_cloudPharmerIo_cloudprovidersYaml,
		"cloud.pharmer.io_cloudproviders.yaml",
	)
}

func cloudPharmerIo_cloudprovidersYaml() (*asset, error) {
	bytes, err := cloudPharmerIo_cloudprovidersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.pharmer.io_cloudproviders.yaml", size: 7838, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cloudPharmerIo_credentialformatsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xcd\x8e\x1b\x37\x0c\xbe\xfb\x29\x08\xf4\x90\x4b\x6d\x63\xd1\x4b\x31\xb7\xc2\x6d\x80\xa0\x2d\x50\x64\xd3\xdc\x69\x89\x1e\x33\xab\x91\x54\x92\x9a\xd6\x7d\xfa\x42\x9a\xb1\xd7\xb3\xeb\x4d\x17\x0b\x64\x6e\xe2\xc7\xdf\x8f\xa4\x34\x98\xf9\x33\x89\x72\x8a\x1d\x60\x66\xfa\xc7\x28\xd6\x93\x6e\x1e\x7e\xd4\x0d\xa7\xed\x78\xb7\x27\xc3\xbb\xd5\x03\x47\xdf\xc1\xae\xa8\xa5\xe1\x23\x69\x2a\xe2\xe8\x67\x3a\x70\x64\xe3\x14\x57\x03\x19\x7a\x34\xec\x56\x00\x4e\x08\xab\xf0\x13\x0f\xa4\x86\x43\xee\x20\x96\x10\x56\x00\x01\xf7\x14\xb4\xea\x00\x60\xce\x1d\xe4\x23\xca\x40\xb2\x02\x88\x38\x50\x57\x4d\x3d\x45\x63\x0c\x87\x24\x03\x9a\x6e\x5c\x48\xc5\x6f\x66\xbd\x0d\xa7\x95\x66\x72\xd5\x43\x2f\xa9\xe4\x0e\x9e\xe1\x93\xab\x39\x88\x43\xa3\x3e\x09\x9f\xcf\xeb\xab\x88\xf5\x84\x39\xab\x4b\x9e\xda\x71\x2e\xf1\x92\xc2\xfb\x96\x42\x83\x02\xab\xfd\x7a\x13\xfe\x8d\x75\x52\xc9\xa1\x08\x86\x1b\x25\x34\x54\x39\xf6\x25\xa0\x3c\xc7\x57\x00\x59\x48\x49\x46\xfa\x33\x3e\xc4\xf4\x77\x7c\xcf\x14\xbc\x76\x70\xc0\xa0\x35\x33\x75\x29\x53\x07\xbb\x50\xd4\x5a\xe6\x23\x06\xf6\x8d\xe2\xa9\xaa\x94\x29\xfe\xf4\xc7\x87\xcf\x3f\xdc\xbb\x23\x0d\x38\x09\xab\xdb\x94\x49\xec\x52\xfc\xc4\xfa\xa5\xdf\x17\x19\x80\x27\x75\xc2\xb9\x79\x84\x77\xd5\xd5\xa4\x03\xbe\x76\x98\x14\xec\x48\x30\x4e\x32\xf2\xa0\x2d\x0c\xa4\x03\xd8\x91\x15\x84\x5a\x01\xd1\x5a\x4a\x57\x6e\xa1\xaa\x60\x84\xb4\xff\x42\xce\x36\x70\x5f\x8b\x14\x05\x3d\xa6\x12\x3c\xb8\x14\x47\x12\x03\x21\x97\xfa\xc8\xff\x5e\x3c\x2b\x58\x6a\x21\x03\x1a\xcd\xf4\x9e\x3f\x8e\x46\x12\x31\x54\x12\x0a\x7d\x0f\x18\x3d\x0c\x78\x02\xa1\x1a\x03\x4a\xbc\xf2\xd6\x54\x74\x03\xbf\x27\x21\xe0\x78\x48\x1d\x1c\xcd\xb2\x76\xdb\x6d\xcf\x76\x9e\x70\x97\x86\xa1\x44\xb6\xd3\xd6\xa5\x68\xc2\xfb\x62\x49\x74\xeb\x69\xa4\xb0\x55\xee\xd7\x28\xee\xc8\x46\xce\x8a\xd0\x16\x33\xaf\x5b\xe2\xd1\xda\x9a\x0c\xfe\x3b\x99\xd7\x41\xdf\x5d\x65\x6a\xa7\xda\x33\x35\xe1\xd8\x5f\xc4\x6d\xc2\x5e\xe4\xbd\x0e\x18\xb0\x02\xce\x66\x53\xfe\x8f\xf4\x56\x51\x65\xe5\xe3\x2f\xf7\x9f\xe0\x1c\xb4\xb5\x60\xc9\x79\x63\xfb\xd1\x4c\x1f\x89\xaf\x44\x71\x3c\x90\x4c\x8d\x3b\x48\x1a\x9a\x47\x8a\x3e\x27\x8e\xd6\x0e\x2e\x30\xc5\x25\xe9\x5a\xf6\x03\x5b\xed\xf4\x5f\x85\xd4\x6a\x7f\x36\xb0\xc3\x18\x93\xc1\x9e\xa0\x64\x8f\x46\x7e\x03\x1f\x22\xec\x70\xa0\xb0\x43\xa5\x6f\x4e\x7b\x65\x58\xd7\x95\xd2\xff\x27\xfe\xfa\x7a\x5a\x2a\x4e\x6c\x5d\xc4\xe7\xdb\xe5\x66\x87\x9e\xee\xfe\x7d\x26\xb7\x58\x11\x4f\xca\x52\xc7\xd8\xd0\xa8\x0e\xff\xcd\xcb\xe4\xe5\xed\x6c\x11\x59\x73\xc0\xd3\xa4\xbf\x84\x5e\x28\xae\x7e\x87\xe9\xce\x78\xa2\xce\x46\xc3\x33\xe1\xcb\xa1\xa7\x8f\xe2\xe8\x52\x3c\x70\x7f\x0b\xfc\x4a\x0a\x73\x22\x49\x86\x37\x19\x72\xcc\xe5\x59\xbd\xaf\xb2\xfc\xa2\xcb\xdb\xec\xd5\x86\xed\x39\x7a\x83\xe5\xcd\xc9\xb9\x86\x50\x04\x4f\x0b\x24\x4b\x1a\xd9\x93\xbc\xb2\xa1\x75\xd1\xea\x24\x5d\xab\xaf\x97\xa3\xb1\x40\xa6\xf6\x2f\x44\xe7\x88\x5f\x9f\xf8\x27\xa2\xf1\xfc\x2f\x30\xde\x3d\x9e\xda\x94\xac\xe7\x17\xba\x01\x00\xed\xbd\xf2\x1d\x98\x94\xe9\xf1\x54\x4b\x82\x3d\xcd\x92\xff\x02\x00\x00\xff\xff\xb7\xa7\xdf\x6f\x57\x08\x00\x00")

func cloudPharmerIo_credentialformatsYamlBytes() ([]byte, error) {
	return bindataRead(
		_cloudPharmerIo_credentialformatsYaml,
		"cloud.pharmer.io_credentialformats.yaml",
	)
}

func cloudPharmerIo_credentialformatsYaml() (*asset, error) {
	bytes, err := cloudPharmerIo_credentialformatsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.pharmer.io_credentialformats.yaml", size: 2135, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cloudPharmerIo_credentialsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xcf\x8f\x2b\x35\x0c\xbe\xf7\xaf\xb0\xc4\xe1\x5d\xe8\x54\x2b\x2e\x68\x6e\xa8\x80\xf4\x04\x48\x4f\xdb\x65\xef\x6e\xe2\x4e\xcd\x66\x9c\x10\x3b\x03\xcb\x5f\x8f\x92\x99\xfe\x84\x2e\x27\xe6\xe6\x2f\xce\x67\xfb\xb3\xe3\xc1\xc4\xaf\x94\x95\xa3\xf4\x80\x89\xe9\x4f\x23\xa9\x96\x76\x6f\xdf\x6a\xc7\x71\x33\x3d\xed\xc9\xf0\x69\xf5\xc6\xe2\x7b\xd8\x16\xb5\x38\x3e\x93\xc6\x92\x1d\x7d\x4f\x07\x16\x36\x8e\xb2\x1a\xc9\xd0\xa3\x61\xbf\x02\x70\x99\xb0\x82\x2f\x3c\x92\x1a\x8e\xa9\x07\x29\x21\xac\x00\x02\xee\x29\x68\xf5\x01\xc0\x94\x7a\x48\x47\xcc\x23\xe5\x15\x80\xe0\x48\x7d\xbd\xea\x49\x8c\x31\x68\xe7\x42\x2c\xbe\x5b\x3c\x3a\x8e\x2b\x4d\xe4\xea\xdd\x21\xc7\x92\x7a\xf8\xc7\xf9\x4c\xb2\xd0\x3b\x34\x1a\x62\xe6\x93\xbd\xbe\x8a\x55\x2d\x4c\x49\x5d\xf4\xd4\xcc\xa5\xb8\x73\xf0\x06\x06\x56\xfb\xe9\xee\xe0\x67\x56\x6b\x87\x29\x94\x8c\xe1\x26\xe1\x86\x2b\xcb\x50\x02\xe6\xeb\x93\x15\x40\xca\xa4\x94\x27\xfa\x55\xde\x24\xfe\x21\x3f\x32\x05\xaf\x3d\x1c\x30\x68\xcd\x40\x5d\x4c\xd4\xc3\x36\x14\xb5\x96\xe1\x84\x81\x7d\x13\x71\xce\x3e\x26\x92\xef\xbe\x7c\x7e\xfd\x66\xe7\x8e\x34\xe2\x0c\x56\xda\x98\x28\xdb\xb9\xc8\x59\xd7\x73\x47\xcf\x18\x80\x27\x75\x99\x53\x63\x84\x4f\x95\x6a\xf6\x01\x5f\x7b\x48\x0a\x76\x24\x98\x66\x8c\x3c\x68\x0b\x03\xf1\x00\x76\x64\x85\x4c\xad\x00\xb1\x96\xd2\x15\x2d\x54\x17\x14\x88\xfb\xdf\xc8\x59\x07\xbb\x5a\x64\x56\xd0\x63\x2c\xc1\x83\x8b\x32\x51\x36\xc8\xe4\xe2\x20\xfc\xd7\x99\x59\xc1\x62\x0b\x19\xd0\x68\x91\xf4\xf4\xb1\x18\x65\xc1\x50\x45\x28\xf4\x35\xa0\x78\x18\xf1\x1d\x32\xd5\x18\x50\xe4\x8a\xad\xb9\x68\x07\xbf\xc4\x4c\xc0\x72\x88\x3d\x1c\xcd\x92\xf6\x9b\xcd\xc0\x76\x9a\x61\x17\xc7\xb1\x08\xdb\xfb\xc6\x45\xb1\xcc\xfb\x62\x31\xeb\xc6\xd3\x44\x61\xa3\x3c\xac\x31\xbb\x23\x1b\x39\x2b\x99\x36\x98\x78\xdd\x12\x17\x6b\x0f\x61\xf4\x5f\xe5\x65\xe0\xf5\xd3\x55\xa6\xf6\x5e\x7b\xa6\x96\x59\x86\x33\xdc\x26\xe9\xa1\xee\x75\x9c\x80\x15\x70\xb9\x36\xe7\x7f\x91\xb7\x42\x55\x95\xe7\x1f\x76\x2f\x70\x0a\xda\x5a\x70\xab\x79\x53\xfb\x72\x4d\x2f\xc2\x57\xa1\x58\x0e\x94\xe7\xc6\x1d\x72\x1c\x1b\x23\x89\x4f\x91\xc5\x9a\xe1\x02\x93\xdc\x8a\xae\x65\x3f\xb2\xd5\x4e\xff\x5e\x48\xad\xf6\xa7\x83\x2d\x8a\x44\x83\x3d\x41\x49\x1e\x8d\x7c\x07\x9f\x05\xb6\x38\x52\xd8\xa2\xd2\xff\x2e\x7b\x55\x58\xd7\x55\xd2\xff\x16\xfe\x7a\x01\xdd\x3a\xce\x6a\x9d\xe1\xd3\x16\xf9\xd7\x0e\x5d\x5e\xfa\x2e\x91\xbb\x79\x1c\x9e\x94\x73\x1d\x60\x43\xa3\x3a\xf6\x77\xeb\xe2\xf1\x8b\x6c\x51\xee\x52\x6b\x2f\xd5\xfb\xb6\x3c\x31\x7c\x79\x70\xeb\x61\xb5\x1f\xd4\xb7\x64\x31\xb1\xa7\x7c\xcf\xf6\x80\xab\x36\xbd\xd6\x76\xed\xbe\x6e\x29\xdf\x00\x27\xd6\x8f\x15\xbe\x83\xa6\xd3\xdf\x65\x7a\xba\x58\xad\xcc\xf5\xb2\xf3\xdb\x01\x40\xdb\x8f\xbe\x07\xcb\x65\x5e\xca\x6a\x31\xe3\x40\x0b\xf2\x77\x00\x00\x00\xff\xff\x86\xb0\x7f\x6f\xa9\x06\x00\x00")

func cloudPharmerIo_credentialsYamlBytes() ([]byte, error) {
	return bindataRead(
		_cloudPharmerIo_credentialsYaml,
		"cloud.pharmer.io_credentials.yaml",
	)
}

func cloudPharmerIo_credentialsYaml() (*asset, error) {
	bytes, err := cloudPharmerIo_credentialsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.pharmer.io_credentials.yaml", size: 1705, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cloudPharmerIo_kubernetesversionsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\xcd\x8e\xdc\x36\x0c\x80\xef\xf3\x14\x04\x7a\xc8\xa5\xe3\xc1\xa2\x97\xc2\xb7\x62\xda\x02\x41\x5a\x20\xc8\xa6\xb9\xd3\x12\xc7\xc3\xac\x4c\xa9\x22\xe5\x76\xfb\xf4\x85\x64\xcf\xcf\x6e\x66\xda\x5c\xe2\x9b\x48\x9a\x3f\x1f\x29\x0a\x13\x7f\xa2\xac\x1c\xa5\x07\x4c\x4c\x7f\x1b\x49\x3d\x69\xf7\xf4\xa3\x76\x1c\x77\xf3\xc3\x40\x86\x0f\x9b\x27\x16\xdf\xc3\xbe\xa8\xc5\xe9\x03\x69\x2c\xd9\xd1\xcf\x74\x60\x61\xe3\x28\x9b\x89\x0c\x3d\x1a\xf6\x1b\x00\x97\x09\xab\xf0\x23\x4f\xa4\x86\x53\xea\x41\x4a\x08\x1b\x80\x80\x03\x05\xad\x36\x00\x98\x52\x0f\xe9\x88\x79\xa2\xbc\x01\x10\x9c\xa8\x87\xa7\x32\x50\x16\x32\xd2\x79\xc9\x4a\x3b\x17\x62\xf1\xdd\x6a\xd8\x71\xdc\x68\x22\x57\x5d\x8c\x39\x96\xd4\xc3\x17\xfa\xc5\xd7\x1a\xc5\xa1\xd1\x18\x33\x9f\xce\xdb\xab\x90\xf5\x84\x29\xa9\x8b\x9e\xda\x71\xa9\xf1\xdd\x39\x87\x95\x4c\xd3\x05\x56\x7b\x77\x5b\xff\x1b\xab\x35\x9b\x14\x4a\xc6\x70\xab\x8a\xa6\x56\x96\xb1\x04\xcc\x37\x0c\x36\x00\x29\x93\x52\x9e\xe9\x0f\x79\x92\xf8\x97\xfc\xca\x14\xbc\xf6\x70\xc0\xa0\x35\x3b\x75\x31\x51\x0f\xfb\x50\xd4\x5a\xf6\x33\x06\xf6\x8d\xf3\x52\x59\x4c\x24\x3f\xbd\x7f\xfb\xe9\x87\x47\x77\xa4\x09\x17\x61\x75\x1b\x13\x65\x3b\x03\x58\xd0\x9f\x9b\x7e\x96\x01\x78\x52\x97\x39\x35\x8f\xf0\xa6\xba\x5a\x6c\xc0\xd7\x36\x93\x82\x1d\x09\xd6\x7c\xc9\x83\xb6\x30\x10\x0f\x60\x47\x56\xc8\xd4\x0a\x10\x6b\x29\x5d\xb9\x85\x6a\x82\x02\x71\xf8\x4c\xce\x3a\x78\xac\x45\x66\x05\x3d\xc6\x12\x3c\xb8\x28\x33\x65\x83\x4c\x2e\x8e\xc2\xff\x9c\x3d\x2b\x58\x6c\x21\x03\x1a\xad\x80\x4f\x1f\x8b\x51\x16\x0c\x15\x42\xa1\xef\x01\xc5\xc3\x84\xcf\x90\xa9\xc6\x80\x22\x57\xde\x9a\x89\x76\xf0\x7b\xcc\x04\x2c\x87\xd8\xc3\xd1\x2c\x69\xbf\xdb\x8d\x6c\xa7\x31\x77\x71\x9a\x8a\xb0\x3d\xef\x5c\x14\xcb\x3c\x14\x8b\x59\x77\x9e\x66\x0a\x3b\xe5\x71\x8b\xd9\x1d\xd9\xc8\x59\xc9\xb4\xc3\xc4\xdb\x96\xb8\x58\x9b\xd1\xc9\x7f\x97\xd7\x3b\xa1\x6f\xae\x32\xb5\xe7\xda\x33\xb5\xcc\x32\x9e\xc5\x6d\xca\xee\x72\xaf\x33\x06\xac\x80\xeb\x6f\x4b\xfe\x17\xbc\x55\x54\xa9\x7c\xf8\xe5\xf1\x23\x9c\x82\xb6\x16\xbc\x64\xde\x68\x5f\x7e\xd3\x0b\xf8\x0a\x8a\xe5\x40\x79\x69\xdc\x21\xc7\xa9\x79\x24\xf1\x29\xb2\x58\x3b\xb8\xc0\x24\x2f\xa1\x6b\x19\x26\xb6\xda\xe9\x3f\x0b\xa9\xd5\xfe\x74\xb0\x47\x91\x68\x30\x10\x94\xe4\xd1\xc8\x77\xf0\x56\x60\x8f\x13\x85\x3d\x2a\x7d\x73\xec\x95\xb0\x6e\x2b\xd2\xff\x07\x7f\xbd\xa3\x5e\x1a\x2e\xb4\xce\xe2\xd3\x86\xb9\xd9\xa1\x2f\xae\xff\x63\x22\xf7\xe2\x8e\x78\x52\xce\x75\x8e\x0d\x8d\xea\xf4\xdf\xde\x28\xf7\xef\x67\xfd\x48\xe6\x57\x12\x00\xf4\xbe\x6d\x5b\x0c\xef\xef\xfc\x75\x29\x69\x88\x31\x10\xca\xe6\x96\xee\x55\xb9\xf5\x1b\xd9\x6e\xac\x84\xbb\x28\x1b\x4e\xfc\x1c\xf3\xd7\x5b\xb3\x7c\xb5\x75\x9d\xb0\x4a\xf0\xda\x7c\x7b\x95\xe2\x7f\xf7\xef\x95\x68\x3e\x3d\x6f\xf3\xc3\xe5\xd4\xb0\x6d\xd7\x47\xa7\x29\x00\xda\xf6\xf5\x3d\x58\x2e\xcb\x73\xa0\x16\x33\x8e\xb4\x4a\xfe\x0d\x00\x00\xff\xff\x77\x9f\x99\x41\x2a\x07\x00\x00")

func cloudPharmerIo_kubernetesversionsYamlBytes() ([]byte, error) {
	return bindataRead(
		_cloudPharmerIo_kubernetesversionsYaml,
		"cloud.pharmer.io_kubernetesversions.yaml",
	)
}

func cloudPharmerIo_kubernetesversionsYaml() (*asset, error) {
	bytes, err := cloudPharmerIo_kubernetesversionsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.pharmer.io_kubernetesversions.yaml", size: 1834, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cloudPharmerIo_machinetypesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xcd\x8e\x23\x35\x10\xbe\xe7\x29\x4a\xe2\xb0\x17\xd2\xd1\x8a\x0b\xea\xdb\x2a\x80\xb4\x2c\x03\xa3\xc9\xec\xde\x2b\x76\x25\x29\xe2\x3f\x5c\xe5\x40\x16\xf1\xee\xc8\xee\x74\xd2\xc9\xce\x40\x0e\xd0\xb7\xfa\x77\x7d\xf5\x95\xdd\x98\xf8\x13\x65\xe1\x18\x7a\xc0\xc4\xf4\x87\x52\xa8\x92\x74\xfb\x6f\xa5\xe3\xb8\x38\xbc\x5d\x93\xe2\xdb\xd9\x9e\x83\xed\x61\x59\x44\xa3\x7f\x22\x89\x25\x1b\xfa\x8e\x36\x1c\x58\x39\x86\x99\x27\x45\x8b\x8a\xfd\x0c\xc0\x64\xc2\xaa\x7c\x66\x4f\xa2\xe8\x53\x0f\xa1\x38\x37\x03\x70\xb8\x26\x27\xd5\x07\x00\x53\xea\x21\xed\x30\x7b\xca\x33\x80\x80\x9e\x7a\xf0\x68\x76\x1c\x48\x8f\x89\xa4\x33\x2e\x16\xdb\x9d\x5c\x3a\x8e\x33\x49\x64\x6a\x30\x5a\xdb\xaa\xa2\x7b\xcc\x1c\x94\xf2\x32\xba\xe2\x43\x4b\x3c\x87\x1f\x57\xbf\xfc\xfc\x88\xba\xeb\xa1\xab\x01\x9d\xec\x4b\x2b\x38\x54\x58\x7d\xf8\xd8\xa4\x5a\xa2\x07\xd1\xcc\x61\xfb\x62\x98\x49\xd3\xb0\xe5\xe3\x9d\x61\x19\xfd\x24\xec\xe9\xdd\xc3\x4b\x61\xdb\x1c\x4b\xea\xe1\x8b\x06\x87\xb0\x13\x40\x06\x95\xb6\x31\xf3\x28\xcf\x27\x68\x55\x09\x53\x12\x13\x2d\x35\x71\x18\xcf\xc3\x00\xdf\xf3\x31\x0d\x5a\xc7\xa2\x1f\x6e\x2d\x3f\xb1\x68\xb3\x26\x57\x32\xba\x6b\xd0\x9b\x41\x38\x6c\x8b\xc3\x7c\x65\x9a\x01\xa4\x4c\x42\xf9\x40\x1f\xc3\x3e\xc4\xdf\xc3\x0f\x4c\xce\x4a\x0f\x1b\x74\x52\xcd\x62\x62\xed\x72\xe9\x8a\x68\x3b\xa5\x94\x75\x3e\x51\x45\x7a\xf8\xf3\xaf\x19\xc0\x01\x1d\xdb\xc6\x8e\xa1\xa9\x98\x28\xbc\x7b\x7c\xff\xe9\x9b\x95\xd9\x91\xc7\x41\x59\x2b\xc5\x44\x59\xcf\xbd\x0f\x84\x39\x53\xf5\xac\x03\xb0\x24\x26\x73\x6a\x19\xe1\x4d\x4d\x35\xf8\x80\xad\xe4\x24\x01\xdd\x11\x1c\x06\x1d\x59\x90\x56\x06\xe2\x06\x74\xc7\x02\x99\x5a\x4f\x41\xdb\x91\x26\x69\xa1\xba\x60\x80\xb8\xfe\x95\x8c\x76\xb0\xaa\x7d\x67\x01\xd9\xc5\xe2\x2c\x98\x18\x0e\x94\x15\x32\x99\xb8\x0d\xfc\xf9\x9c\x59\x40\x63\x2b\xe9\x50\xe9\x84\xf3\xf8\x35\xaa\x06\x74\x15\x84\x42\x5f\x03\x06\x0b\x1e\x8f\x90\xa9\xd6\x80\x12\x26\xd9\x9a\x8b\x74\xf0\x10\x33\x01\x87\x4d\xec\x61\xa7\x9a\xa4\x5f\x2c\xb6\xac\xe3\x72\x9a\xe8\x7d\x09\xac\xc7\x85\x89\x41\x33\xaf\x8b\xc6\x2c\x0b\x4b\x07\x72\x0b\xe1\xed\x1c\xb3\xd9\xb1\x92\xd1\x92\x69\x81\x89\xe7\xed\xe0\x41\xdb\x86\x7b\xfb\xd5\x79\x3c\x6f\x26\x27\xbd\x21\xeb\xf0\x35\x82\xbd\x8a\x7b\x25\x19\xb0\x00\x9e\xc2\x86\xf3\x5f\xe0\xad\xaa\x8a\xca\xd3\xf7\xab\x67\x18\x8b\xb6\x11\x5c\x63\xde\xd0\xbe\x84\xc9\x05\xf8\x0a\x14\x87\x0d\xe5\x61\x70\x9b\x1c\x7d\xcb\x48\xc1\xa6\xc8\x41\x9b\x60\x1c\x53\xb8\x06\x5d\xca\xda\xb3\xd6\x49\xff\x56\x48\xb4\xce\xa7\x83\x25\x86\x10\x15\xd6\x04\x25\x59\x54\xb2\x1d\xbc\x0f\xb0\x44\x4f\x6e\x89\x42\xff\x3b\xec\x6d\xd5\xe6\x15\xd2\x7f\x07\x7e\x7a\xb3\x5e\x3b\x0e\x68\x9d\xd5\xe3\xed\xf8\xe2\x84\x26\xfb\xbf\x4a\x64\xae\xb6\xc3\x92\x70\xae\x0c\x56\x54\xaa\xbc\xbf\xbd\x46\x5e\xdf\xc9\xc9\x3d\x75\xbc\xd6\xbe\xd2\x4d\x0b\x48\xe5\x6e\x5f\x5b\xa9\x50\x2b\xd8\x97\x43\xd6\x31\x3a\xc2\x70\x13\x73\x69\xfc\xee\x3a\x2c\xfb\xbb\x9d\x33\xfa\xfb\x7d\x69\x5b\xa7\x7e\xeb\xcf\x4a\xfe\x0b\xe5\x3f\xa4\x19\x4d\x98\x33\x1e\xaf\x09\xbe\xbf\x1f\xcd\xcf\x31\xdc\x4e\xef\xbf\x3b\x4a\xdd\xb0\xca\xa3\x69\xaa\x39\x8c\xcf\xe8\x28\x8f\xef\xe3\x28\x8f\xaf\xf3\x34\xf3\x15\xb1\x6f\x54\x87\xf1\x6f\xe5\xf0\xf6\x22\x9d\x5e\xfe\xe1\xcd\x6d\x06\x80\xf6\x52\xd9\x1e\x34\x97\x81\xc5\xa2\x31\xe3\x96\x4e\x9a\xbf\x03\x00\x00\xff\xff\xaf\x5e\xba\xe6\xf9\x08\x00\x00")

func cloudPharmerIo_machinetypesYamlBytes() ([]byte, error) {
	return bindataRead(
		_cloudPharmerIo_machinetypesYaml,
		"cloud.pharmer.io_machinetypes.yaml",
	)
}

func cloudPharmerIo_machinetypesYaml() (*asset, error) {
	bytes, err := cloudPharmerIo_machinetypesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.pharmer.io_machinetypes.yaml", size: 2297, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.pharmer.io_cloudproviders.yaml":     cloudPharmerIo_cloudprovidersYaml,
	"cloud.pharmer.io_credentialformats.yaml":  cloudPharmerIo_credentialformatsYaml,
	"cloud.pharmer.io_credentials.yaml":        cloudPharmerIo_credentialsYaml,
	"cloud.pharmer.io_kubernetesversions.yaml": cloudPharmerIo_kubernetesversionsYaml,
	"cloud.pharmer.io_machinetypes.yaml":       cloudPharmerIo_machinetypesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.pharmer.io_cloudproviders.yaml":     {cloudPharmerIo_cloudprovidersYaml, map[string]*bintree{}},
	"cloud.pharmer.io_credentialformats.yaml":  {cloudPharmerIo_credentialformatsYaml, map[string]*bintree{}},
	"cloud.pharmer.io_credentials.yaml":        {cloudPharmerIo_credentialsYaml, map[string]*bintree{}},
	"cloud.pharmer.io_kubernetesversions.yaml": {cloudPharmerIo_kubernetesversionsYaml, map[string]*bintree{}},
	"cloud.pharmer.io_machinetypes.yaml":       {cloudPharmerIo_machinetypesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
